[[[2009-12-10 |上一週]]] || [[[2009-12-24 |下一週]]]

[[toc]]

+ ClydeWu:
http://moto.debian.org.tw/viewtopic.php?t=6572

+ cclien:
笑話時間
[http://moto.debian.org.tw/viewtopic.php?t=6572 I hacked 127.0.0.1]

[http://www.youtube.com/results?search_query=%E9%87%91%E5%9D%B7%E6%8B%89&search_type=&aq=f 金坷拉]
+ chihchun
[http://dreamyeh.pixnet.net/blog/post/25532446 金坷拉懶人包]

+ Fourdollars:
cascade function call, jquery 的版本好用，
然後想說不知道有沒有 c 的版本，就寫了一個...
C 版的 cascaded function:

[[code]]

Object *obj = createObject();
obj->foo( obj)->foo(obj)->foo(obj)->foo(obj);

[[/code]]

只能訂一個 function pointer 
順序是從左到右

+ yuren:
facebook 的外掛程式
dbus service, 
專案名稱: wallbox 
用 dbus 來分離前端與後端!!
號稱2個星期寫完!
用 python 寫的!
用 github, 原本想用 bitbucket, 不過沒有人在用...

+ Mat:
有時候會執行一些指令會等很久，可是沒辦法每次都記得用 time 指令去記時間。
所以想到上次 Aki 提到的 bash prompt 的東西，就試作了一個簡易計時的 bash prompt。
只要將程式碼貼到 ~/.bashrc 的最下面就可以了

[[code]]
count_time2(){

        TimeFile="/tmp/.__timestamp__$(tty | tr '/' '_' )"
        test -f $TimeFile || date +%s > $TimeFile
        TimeOrig=$( test -f $TimeFile && cat $TimeFile )

        Time=$( date +%s )

        Delta=$(( $Time - $TimeOrig ))
        Sec=$(( $Delta % 60 ))
        Min=$(( ( $Delta / 60 ) % 60 ))
        Hour=$(( ( $Delta / 60 / 60  ) % 60 ))

        if (( $Hour > 0 ))
        then
        Output="[${Hour} hr ${Min} min ${Sec} sec]\n\r"
        elif (( $Hour < 0 || $Min > 0 ))
        then
        Output="[${Min} min ${Sec} sec]\n\r"
        else
        Output=""
        fi

        echo -e "$Output"

        TimeOrig=$Time
        echo $TimeOrig > $TimeFile

}

export PS1="\$(count_time2)$PS1"
[[/code]]

感謝 LCamel 的提示，改用
[[code]]
$SECONDS 
[[/code]] 變數來取代寫 /tmp/ 暫存檔的方法，BTW LCamel 也提到可以用
[[code]]
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S "
[[/code]]
將時間紀錄在 bash 的 history 裡。

後來發現用 $SECONDS 的方式有 Bug ，先改回原本的寫檔方式的版本


+ shengpo:
使用Processing寫Andriod程式 (beta版, 目前port到Andriod手機上尚有風險)
http://android.processing.org/

+ Tsung:
Go 語言與 C 語言的小故事
http://golangd.com/viewtopic.php?f=5&t=20

+ yan:
在eeepc上有插一張記憶卡存放資料並備份設定檔, 然後也備份到 Dropbox (安裝參考 http://wiki.dropbox.com/TipsAndTricks/TextBasedLinuxInstall)
參考 Mat 的程式, 使用 osd_cat 做 on-screen 顯示, 在 wmii 綁了一個快捷鍵, 以查看資料是否同步完成, 這樣再離開網路 

[[code]]
for i in 0 1 2;
do
	echo -n `python dropbox/dbcli.py status`' ...' | /usr/bin/osd_cat --pos=top --offset=18 --align=right --indent=16 --lines=1 --font='10x20' --shadow 0 --color=green --delay=1
	sleep 1
done
[[/code]]

fourdollars: 有 inotify 可以監視資料夾, 並 trigger 一個事件

小豬: 用 nohup 來脫離父行程, 並且執行的使用者登出後不會關閉